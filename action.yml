name: 'Add debian repository'
description: 'Add debian repository to /etc/apt/sources.list.d'
branding:
  icon: 'archive'  
  color: 'purple'
inputs:
  repo:
    description: 'repository line as it appears in the sources.list'
    required: true
  repo-name:
    description: 'name of the repository, the name will be used for a new file in the /etc/apt/sources.list.d directory, the .list suffix will be added to the name'
    required: true
  keys:
    description: 'repository keys to import using apt-key'
    required: false
    default:
    deprecationMessage: 'deprecatged in favor of "keys-asc" input'
  key-server:
    description: 'key server to import repository keys from, or direct URL to key if "keys" is not specified'
    required: false
    default:
    deprecationMessage: 'deprecatged in favor of "keys-asc" input'
  keys-asc:
    description: 'URL to ascii armored keys, the key is saved to /etc/apt/trusted.gpg.d/<repo-name>.asc'
    required: false
    deafult:
  update:
    description: "perform 'apt update' after adding the repo"
    required: false
    default: true
  install:
    description: "space separated list of packages to install after adding the repo, update will be performed first"
    required: false
    default:
runs:
  using: "composite"
  steps:
    - name: import repository keys
      run: |
        if [ ! -z "${{ inputs.key-server }}" ] || [ ! -z "${{ inputs.keys-asc }}" ]; then
            if [ "$(id --user)" -eq "0" ]; then
                sudocmd=""
            else
                sudocmd="sudo"
            fi

            $sudocmd apt --quiet update --assume-yes || true
            $sudocmd apt --quiet install --assume-yes dirmngr curl apt-transport-https

            if [ ! -z "${{ inputs.keys-asc }}" ]; then
                echo "download ascii armored keys"
                curl --silent --show-error ${{ inputs.keys-asc }} | $sudocmd dd of=/etc/apt/trusted.gpg.d/${{ inputs.repo-name }}.asc
            elif [ ! -z "${{ inputs.keys }}" ]; then
                echo "download key from keyserver"
                $sudocmd apt-key adv --keyserver ${{ inputs.key-server }} --recv-keys ${{ inputs.keys }}
            else
                # try downloding key as if key-server is a direct URL to the key
                echo "download key from direct URL provided as key-server"
                curl --silent --show-error ${{ inputs.key-server }} | $sudocmd apt-key add
            fi

            # update yarn key just in case, as it tends to expire often
            echo "update yarn key"
            curl --silent --show-error https://dl.yarnpkg.com/debian/pubkey.gpg | $sudocmd dd of=/etc/apt/trusted.gpg.d/yarn.asc
        else
            echo "no keys specified, nothing to import"
        fi
      shell: bash
    - name: add debian repo
      run: |
        if [ "$(id --user)" -eq "0" ]; then
          sudocmd=""
        else
          sudocmd="sudo"
        fi
        
        echo "${{ inputs.repo }}" | $sudocmd dd of=/etc/apt/sources.list.d/${{ inputs.repo-name }}.list
      shell: bash
    - name: apt update
      run: |
        if [ "${{ inputs.update }}" == "true" ] || [ ! -z "${{ inputs.install }}" ]; then
            if [ "$(id --user)" -eq "0" ]; then
              sudocmd=""
            else
              sudocmd="sudo"
            fi
            
            $sudocmd apt --quiet update --assume-yes
        else
            echo "update is not requested"
        fi
      shell: bash
    - name: apt install
      run: |
        if [ ! -z "${{ inputs.install }}" ]; then
            if [ "$(id --user)" -eq "0" ]; then
              sudocmd=""
            else
              sudocmd="sudo"
            fi
            
            $sudocmd apt --quiet install --assume-yes ${{ inputs.install }}
        else
            echo "installing packages is not requested"
        fi
      shell: bash
